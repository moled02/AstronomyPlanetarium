Attribute VB_Name = "modPerApg"
'(*****************************************************************************)
'(* Module: PERAPG.PAS                                                        *)
'(* Version 2.0                                                               *)
'(* Last modified: June 3, 1996                                               *)
'(*****************************************************************************)

const
  '{ Table 48.A, 48.B }
  MeanPerApgData : array[1..4, 0..4] of real = (
    ( 171.9179, 335.9106046, -0.0100250, -0.00001156, 0.000000055),
    ( 347.3477,  27.1577721, -0.0008323, -0.0000010, 0),
    ( 316.6109, 364.5287911, -0.0125131, -0.0000148, 0),
    ( 2451534.66989, 27.55454988, -0.0006886, -0.000001098, 0.0000000052))
  CPerTab48A : array[0..59, 0..1] of real = (
    (-1.6769,0), (0.4589,0), (-0.1856,0), (0.0883,0),
    (-0.0773,0.00019), (0.0502,-0.00013), (-0.0460,0), (0.0422,-0.00011),
    (-0.0256,0), ( 0.0253,0), ( 0.0237,0), ( 0.0162,0),
    (-0.0145,0), ( 0.0128,0), (-0.0112,0), (-0.0104,0),
    ( 0.0086,0), ( 0.0069,0), ( 0.0066,0), (-0.0053,0),
    (-0.0052,0), (-0.0046,0), (-0.0041,0), ( 0.0040,0),
    ( 0.0032,0), (-0.0032,0), ( 0.0031,0), (-0.0029,0),
    ( 0.0027,0), ( 0.0027,0), (-0.0027,0), ( 0.0024,0),
    (-0.0021,0), (-0.0021,0), (-0.0021,0), ( 0.0019,0),
    (-0.0018,0), (-0.0014,0), (-0.0014,0), (-0.0014,0),
    ( 0.0014,0), (-0.0014,0), ( 0.0013,0), ( 0.0013,0),
    ( 0.0011,0), (-0.0011,0), (-0.0010,0), (-0.0009,0),
    (-0.0008,0), ( 0.0008,0), ( 0.0008,0), ( 0.0007,0),
    ( 0.0007,0), ( 0.0007,0), (-0.0006,0), (-0.0006,0),
    ( 0.0006,0), ( 0.0005,0), ( 0.0005,0), (-0.0004,0))
   APerTab48A : array[0..59, 0..2] of real = (
    ( 2, 0, 0), ( 4, 0, 0), ( 6, 0, 0), ( 8, 0, 0),
    ( 2, 0,-1), ( 0, 0, 1), (10, 0, 0), ( 4, 0,-1),
    ( 6, 0,-1), (12, 0, 0), ( 1, 0, 0), ( 8, 0,-1),
    (14, 0, 0), ( 0, 0, 2), ( 3, 0, 0), (10, 0,-1),
    (16, 0, 0), (12, 0,-1), ( 5, 0, 0), ( 2, 2, 0),
    (18, 0, 0), (14, 0,-1), ( 7, 0, 0), ( 2, 0, 1),
    (20, 0, 0), ( 1, 0, 1), (16, 0,-1), ( 4, 0, 1),
    ( 9, 0, 0), ( 4, 0, 2), ( 2, 0,-2), ( 4, 0,-2),
    ( 6, 0,-2), (22, 0, 0), (18, 0,-1), ( 6, 0, 1),
    (11, 0, 0), ( 8, 0, 1), ( 4, 0,-2), ( 6, 0, 2),
    ( 3, 0, 1), ( 5, 0, 1), (13, 0, 0), (20, 0,-1),
    ( 3, 0, 2), ( 4, 2,-2), ( 1, 0, 2), (22, 0,-1),
    ( 0, 0, 4), ( 6, 0,-2), ( 2,-2, 1), ( 0, 0, 2),
    ( 0, 2,-1), ( 2, 4, 0), ( 0, 2,-2), ( 2,-2, 2),
    (24, 0, 0), ( 4,-4, 0), ( 2, 0, 2), ( 1, 0,-1))
   CApgTab48A : array[0..31, 0..1] of real = (
    ( 0.4392,0), ( 0.0684,0), ( 0.0456,-0.00011), ( 0.0426,-0.00011),
    ( 0.0212,0), (-0.0189,0), ( 0.0144,0), ( 0.0113,0),
    ( 0.0047,0), ( 0.0036,0), ( 0.0035,0), ( 0.0034,0),
    (-0.0034,0), ( 0.0022,0), (-0.0017,0), ( 0.0013,0),
    ( 0.0011,0), ( 0.0010,0), ( 0.0009,0), ( 0.0007,0),
    ( 0.0006,0), ( 0.0005,0), ( 0.0005,0), ( 0.0004,0),
    ( 0.0004,0), ( 0.0004,0), (-0.0004,0), (-0.0004,0),
    ( 0.0003,0), ( 0.0003,0), ( 0.0003,0), (-0.0003,0))
   AApgTab48A : array[0..31, 0..2] of real = (
    ( 2, 0, 0), ( 4, 0, 0), ( 0, 0, 1), ( 2, 0,-1),
    ( 0, 2, 0), ( 1, 0, 0), ( 6, 0, 0), ( 4, 0,-1),
    ( 2, 2, 0), ( 1, 0, 1), ( 8, 0, 0), ( 6, 0,-1),
    ( 2,-2, 0), ( 2, 0,-2), ( 3, 0, 0), ( 4, 2, 0),
    ( 8, 0,-1), ( 4, 0,-2), (10, 0, 0), ( 3, 0, 1),
    ( 0, 0, 2), ( 2, 0, 1), ( 2, 0, 2), ( 6, 2, 0),
    ( 6, 0,-2), (10, 0,-1), ( 5, 0, 0), ( 4,-2, 0),
    ( 0, 2, 1), (12, 0, 0), ( 2, 2,-1), ( 1, 0,-1))
   CPerTab48B : array[0..46, 0..1] of real = (
   ( 3629.215, 0), ( 63.224, 0), (-6.990, 0), (2.834,-0.0071),
   ( 1.927,0), (-1.263,0), (-0.702,0), (0.696,-0.0017),
   (-0.690,0), (-0.629, 0.0016), (-0.392,0), ( 0.297,0),
   ( 0.260,0), ( 0.201,0), (-0.161,0), ( 0.157,0),
   (-0.138,0), (-0.127,0), ( 0.104,0), ( 0.104,0),
   (-0.079,0), ( 0.068,0), ( 0.067,0), ( 0.054,0),
   (-0.038,0), (-0.038,0), ( 0.037,0), (-0.037,0),
   (-0.035,0), (-0.030,0), ( 0.029,0), (-0.025,0),
   ( 0.023,0), ( 0.023,0), (-0.023,0), ( 0.022,0), (-0.021,0),
   (-0.020,0), ( 0.019,0), ( 0.017,0), ( 0.014,0),
   (-0.014,0), ( 0.013,0), ( 0.012,0), ( 0.011,0),
   ( 0.010,0), (-0.010,0))
   CApgTab48B : array[0..17,0..1] of real = (
   ( 3245.251,0), (-9.147,0), (-0.841,0), ( 0.697,0),
   (-0.656,0.0016), ( 0.355,0), ( 0.159,0), ( 0.127,0),
   ( 0.065,0), ( 0.052,0), ( 0.043,0), ( 0.031,0),
   (-0.023,0), ( 0.022,0), ( 0.019,0), (-0.016,0),
   (0.014,0), (0.010,0))
   APerTab48B : array[0..46, 0..2] of real = (
   ( 0, 0, 0), ( 2, 0, 0), ( 4, 0, 0), ( 2, 0,-1),
   ( 6, 0, 0), ( 1, 0, 0), ( 8, 0, 0), ( 0, 0, 1),
   ( 0, 2, 0), ( 4, 0,-1), ( 2,-2, 0), (10, 0, 0),
   ( 6 ,0,-1), ( 3, 0, 0), ( 2, 0, 1), ( 1, 0, 1),
   (12, 0, 0), ( 8, 0,-1), ( 2, 2, 0), ( 2, 0,-2),
   ( 5, 0, 0), (14, 0, 0), (10, 0,-1), ( 4, 0, 1),
   (12, 0,-1), ( 4, 0,-2), ( 7, 0, 0), ( 4, 2, 0),
   (16, 0, 0), ( 3, 0, 1), ( 1, 0,-1), ( 6, 0, 1),
   ( 0, 0, 2), (14, 0,-1), ( 2, 0, 2), ( 6, 0,-2),
   ( 2,-2,-1), ( 9, 0, 0), (18, 0, 0), ( 6, 2, 0),
   ( 0, 2,-1), (16, 0,-1), ( 4,-2, 0), ( 8, 0, 1),
   (11, 0, 0), ( 4, 0, 1), (20, 0, 0))
   AApgTab48B : array[0..17,0..2] of real = (
   ( 0, 0, 0), ( 2, 0, 0), ( 1, 0, 0), (0 , 2, 0),
   ( 0, 0, 1), ( 4, 0, 0), ( 2, 0,-1), ( 1, 0, 1),
   ( 4, 0,-1), ( 6, 0, 0), ( 2, 0, 1), ( 2, 2, 0),
   ( 2,-2, 0), ( 2, 0,-2), ( 2, 0, 2), ( 0, 0, 2),
   ( 6, 0,-1), ( 8, 0, 0))

'(*****************************************************************************)
'(* Name:    FirstkOfYear                                                     *)
'(* Type:    Function                                                         *)
'(* Purpose: Approximate 'k' corresponding to the beginning of a year.        *)
'(* Arguments:                                                                *)
'(*   Year : the year                                                         *)
'(* Return value:                                                             *)
'(*   the 'k' value corresponding to approximately the first occurance of     *)
'(*   event in Year                                                           *)
'(*****************************************************************************)

Function FirstkPerApgOfYear(Year As Long) As Double
FirstkPerApgOfYear = trunc((Year - 1999.97) * 13.2555)
End Function

'(*****************************************************************************)
'(* Name:   FindMeanValues                                                    *)
'(* Type:   Support function                                                  *)
'(* Purpose:Calculate the mean values, JDE0 and M corresponding to a          *)
'(*         a given event and k value.                                        *)
'(*****************************************************************************)

Sub FindPerApgValues(ByVal k As Double, ByRef JDE As Double, ByRef d As Double, ByRef m As Double, ByRef f As Double)

Dim T As Double
Dim Geg(4) As Double
Dim i As Long
T = k / 1325.55
For i = 1 To 4
    Geg(i) = MeanPerApgData(i, 0)
    Geg(i) = Geg(i) + MeanPerApgData(i, 1) * k
    Geg(i) = Geg(i) + T * T * (MeanPerApgData(i, 2) + _
                             T * (MeanPerApgData(i, 3) + _
                             T * MeanPerApgData(i, 3)))
Next
d = modpi2(Geg(1) * DToR)
f = modpi2(Geg(3) * DToR)
m = modpi2(Geg(2) * DToR)
JDE = Geg(4)
End Sub

'(*****************************************************************************)
'(* Name:    NextPerApg                                                       *)
'(* Type:    Function                                                         *)
'(*   k : index from FirstkOfYear                                             *)
'(* Return value:                                                             *)
'(*   Julian day of instance when the Event occurs                            *)
'(*****************************************************************************)

Sub PerApg(ByVal k As Double, ByRef JDE As Double, ByRef Par As Double)

Dim d As Double, m As Double, f As Double, T As Double, Sum As Double, a As Double
Dim i As Long, j As Long
Dim bPerigeum As Boolean
Dim hAngle   As Double, DeltaJDE As Double, DeltaPar As Double

If Abs(k - trunc(k)) < 0.01 Then
  bPerigeum = True
Else
  bPerigeum = False
End If
Call FindPerApgValues(k, JDE, d, m, f)
T = k / 1325.55
If bPerigeum Then
    For i = 0 To 59
        hAngle = APerTab48A(i, 0) * d
        hAngle = hAngle + APerTab48A(i, 1) * f
        hAngle = hAngle + APerTab48A(i, 2) * m
        DeltaJDE = Sin(hAngle) * (CPerTab48A(i, 0) + T * (CPerTab48A(i, 1)))
        JDE = JDE + DeltaJDE
    Next
    Par = 0
    For i = 0 To 31
        hAngle = APerTab48B(i, 0) * d
        hAngle = hAngle + APerTab48B(i, 1) * f
        hAngle = hAngle + APerTab48B(i, 2) * m
        DeltaPar = Cos(hAngle) * (CPerTab48B(i, 0) + T * (CPerTab48B(i, 1)))
        Par = Par + DeltaPar
    Next
Else
    DeltaJDE = 0
    For i = 0 To 31
        hAngle = AApgTab48A(i, 0) * d
        hAngle = hAngle + AApgTab48A(i, 1) * f
        hAngle = hAngle + AApgTab48A(i, 2) * m
        DeltaJDE = DeltaJDE + Sin(hAngle) * (CApgTab48A(i, 0) + T * (CApgTab48A(i, 1)))
    Next
    JDE = JDE + DeltaJDE
    Par = 0
    For i = 0 To 17
        hAngle = AApgTab48B(i, 0) * d
        hAngle = hAngle + AApgTab48B(i, 1) * f
        hAngle = hAngle + AApgTab48B(i, 2) * m
        DeltaPar = Cos(hAngle) * (CApgTab48B(i, 0) + T * (CApgTab48B(i, 1)))
        Par = Par + DeltaPar
    Next
End If
End Sub

